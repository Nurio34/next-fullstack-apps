//* package.json => "postinstall": "prisma generate --schema=prisma/mongo.prisma" 

//* npx prisma generate --schema=prisma/mongo.prisma
//* npx prisma db push --schema=prisma/mongo.prisma
//* npx prisma studio --schema=prisma/mongo.prisma

generator client {
    provider = "prisma-client-js"
    output   = "../generated/mongo"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_MONGO_URL")
}

model Task {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    date        String
    isComplated Boolean  @default(false)
    isImportant Boolean  @default(false)
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    userId      String

    @@map("tasks")
}

model User {
    id              String          @id @map("_id")
    username        String          @unique
    avatar          String?
    cover           String?
    name            String?
    surname         String?
    description     String?
    city            String?
    school          String?
    work            String?
    website         String?
    createdAt       DateTime        @default(now()) @map("created_at")
    updatedAt       DateTime        @updatedAt @map("updated_at")
    posts           Post[]
    comments        Comment[]
    likes           Like[]
    followings      Follower[]      @relation("fallower")
    followers       Follower[]      @relation("fallowed")
    sentRequests    FollowRequest[] @relation("sender")
    recivedRequests FollowRequest[] @relation("reciver")
    blocks          Block[]         @relation("blocker")
    blockedBys      Block[]         @relation("blocked")
    story           Story[]

    @@map("users")
}

model Post {
    id          String    @id @default(uuid()) @map("_id")
    img         String?
    decsription String
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    likes       Like[]
    comments    Comment[]

    @@map("posts")
}

model Comment {
    id          String   @id @default(uuid()) @map("_id")
    decsription String
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId      String
    likes       Like[]

    @@map("comments")
}

model Like {
    id        String   @id @default(uuid()) @map("_id")
    createdAt DateTime @default(now()) @map("created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String?
    comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String?

    @@map("likes")
}

model Follower {
    id         String   @id @default(uuid()) @map("_id")
    createdAt  DateTime @default(now()) @map("created_at")
    follower   User     @relation("fallower", fields: [followerId], references: [id], onDelete: Cascade)
    followerId String
    followed   User     @relation("fallowed", fields: [followedId], references: [id], onDelete: Cascade)
    followedId String

    @@map("followers")
}

model FollowRequest {
    id        String   @id @default(uuid()) @map("_id")
    createdAt DateTime @default(now()) @map("created_at")
    sender    User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
    senderId  String
    reciver   User     @relation("reciver", fields: [reciverId], references: [id], onDelete: Cascade)
    reciverId String

    @@unique([senderId, reciverId])
    @@map("follow-requests")
}

model Block {
    id        String   @id @default(uuid()) @map("_id")
    createdAt DateTime @default(now()) @map("created_at")
    blocker   User     @relation("blocker", fields: [blockerId], references: [id], onDelete: Cascade)
    blockerId String
    blocked   User     @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)
    blockedId String

    @@unique([blockerId, blockedId])
    @@map("blocks")
}

model Story {
    id        String   @id @default(uuid()) @map("_id")
    createdAt DateTime @default(now()) @map("created_at")
    expiresAt DateTime
    img       String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique

    @@map("stories")
}
